---
- name: Register if Helix supports Glibc version
  ansible.builtin.set_fact:
    helix_glibc_support: >-
      {{ glibc_version is defined and glibc_version is
      ansible.builtin.version("2.38", ">") }}
  when: ansible_system == "Linux"

# Several Linux Helix packages don't include the runtime files so GitHub release
# needs to always be downloaded.
- name: Get latest Helix version for Linux
  ansible.builtin.uri:
    method: GET
    return_content: true
    url: https://formulae.brew.sh/api/formula/helix.json
  register: helix_formula
  when: ansible_system == "Linux"

- name: Parse Helix download folder name
  ansible.builtin.set_fact:
    helix_folder: >-
      {{ 'helix-' + helix_formula.json.versions.stable + '-' + helix_arch +
      '-linux' if helix_glibc_support else 'helix-v' +
      helix_formula.json.versions.stable + '-' + helix_arch + '-unknown-linux-'
      + system_libc }}
  when: ansible_system == "Linux"

- name: Install Helix for FreeBSD
  become: true
  community.general.pkgng:
    name: helix
  when: ansible_system == "FreeBSD"

# TODO: Renable when Helix package in all distributions reaches version 25.01.
# - name: Install Helix for Linux
#   ansible.builtin.package:
#     name: helix
#   become: true
#   ignore_errors: true
#   register: helix_linux
#   when: ansible_system == "Linux"
#
# - name: Make Helix command symlink for Arch
#   ansible.builtin.file:
#     src: /usr/sbin/helix
#     dest: /usr/sbin/hx
#     force: true
#     mode: "755"
#     state: link
#   become: true
#   when: ansible_pkg_mgr == "pacman" and helix_linux is success

# Uses third party release of Helix if on MUSL or older Glibc version.
- name: Download Helix for Linux
  ansible.builtin.unarchive:
    dest: /tmp
    mode: "777"
    remote_src: true
    src: >-
      {{ 'https://github.com/helix-editor/helix/releases/download/' +
      helix_formula.json.versions.stable + '/' + helix_folder + '.tar.xz' if
      helix_glibc_support else
      'https://github.com/zydou/helix/releases/download/v' +
      helix_formula.json.versions.stable + '/' + helix_folder + '.tar.xz' }}
  when: ansible_system == "Linux"

- name: Install Helix for Linux
  ansible.builtin.copy:
    dest: /usr/local/bin/hx
    force: true
    mode: "755"
    remote_src: true
    src: /tmp/{{ helix_folder }}/hx
  become: true
  when: ansible_system == "Linux"

- name: Install Helix for MacOS
  become: true
  become_user: "{{ brew_user }}"
  community.general.homebrew:
    name: helix
  when: ansible_system == "Darwin"

- name: Install Helix for Windows
  community.windows.win_scoop:
    global: "{{ scoop_global }}"
    name:
      - helix
      - vcredist2022
  when: ansible_system == "Win32NT"

- name: Create Helix configuration directory for Unix
  ansible.builtin.file:
    group: "{{ group_id }}"
    mode: "755"
    owner: "{{ user_id }}"
    path: "{{ user_home }}/.config/helix"
    state: directory
  become: true
  when: ansible_system != "Win32NT" and ansible_pkg_mgr != "opkg"

- name: Install Helix runtime files for Linux
  ansible.builtin.copy:
    dest: "{{ user_home }}/.config/helix"
    force: true
    group: "{{ group_id }}"
    mode: "755"
    owner: "{{ user_id }}"
    remote_src: true
    src: /tmp/{{ helix_folder }}/runtime
  become: true
  when: ansible_system == "Linux"

- name: Copy Helix configuration files for Unix
  ansible.builtin.copy:
    dest: "{{ user_home }}/.config/helix/{{ item }}"
    force: true
    group: "{{ group_id }}"
    mode: "644"
    owner: "{{ user_id }}"
    src: "{{ item }}"
  become: true
  loop:
    - config.toml
    - languages.toml
  when: ansible_system != "Win32NT" and ansible_pkg_mgr != "opkg"

- name: Create Helix configuration directory for Windows
  ansible.windows.win_file:
    owner: "{{ user_id }}"
    path: "{{ user_home }}/{{ item }}/helix"
    state: directory
  loop:
    - AppData/Roaming
    - scoop/persist
  when: ansible_system == "Win32NT"

- name: Copy Helix configuration files for Windows
  ansible.windows.win_copy:
    dest: "{{ user_home }}/{{ item.subpath }}/helix/{{ item.file }}"
    force: true
    owner: "{{ user_id }}"
    src: "{{ item.file }}"
  loop:
    - file: config.toml
      subpath: AppData/Roaming
    - file: languages.toml
      subpath: AppData/Roaming
    - file: config.toml
      subpath: scoop/persist
    - file: languages.toml
      subpath: scoop/persist
  when: ansible_system == "Win32NT"
