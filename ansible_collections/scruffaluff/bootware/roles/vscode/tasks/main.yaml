---
# TODO: Integrate once installation becomes stable.
# - name: Install VSCode for Alpine
#   become: true
#   community.general.apk:
#     name: code-oss
#     repository: http://dl-cdn.alpinelinux.org/alpine/edge/testing
#     state: latest
#     update_cache: true
#   when: ansible_pkg_mgr == "apk"

# Arch package repository provides the open source version of Visual Studio
# Code, which cannot install proprietary Microsoft extensions. For more
# information, see
# https://wiki.archlinux.org/index.php/Visual_Studio_Code#No_extensions_found.
- name: Install VSCode for Arch
  ansible.builtin.command: >-
    yay --noconfirm --refresh --sync visual-studio-code-bin
  become: true
  become_user: "{{ user_id }}"
  changed_when: "'installing visual-studio-code-bin' in vscode_arch_install"
  register: vscode_arch_install
  when: ansible_pkg_mgr == "pacman"

- name: Install VSCode for Debian
  ansible.builtin.apt:
    deb: >-
      https://update.code.visualstudio.com/latest/linux-deb-{{ vscode_arch
      }}/stable
  become: true
  when: ansible_pkg_mgr == "apt" and ansible_distribution != "Pop!_OS"

- name: Add Microsoft GPG key for Fedora and Suse
  ansible.builtin.rpm_key:
    key: https://packages.microsoft.com/keys/microsoft.asc
  become: true
  when: ansible_pkg_mgr in ["dnf", "dnf5", "zypper"]

# Package needs to be downloaded to a file with an rpm extension to prevent
# confusion for Ansible DNF module.
- name: Download VSCode for Fedora and Suse
  ansible.builtin.get_url:
    dest: /tmp/vscode.rpm
    mode: "644"
    url: >-
      https://update.code.visualstudio.com/latest/linux-rpm-{{ vscode_arch
      }}/stable
  when: ansible_pkg_mgr in ["dnf", "dnf5", "zypper"]

- name: Install VSCode for Fedora
  ansible.builtin.dnf:
    name: /tmp/vscode.rpm
  become: true
  when: ansible_pkg_mgr in ["dnf", "dnf5", "zypper"]

- name: Install VSCode for MacOS
  community.general.homebrew_cask:
    accept_external_apps: true
    name: visual-studio-code
    state: present
  when: ansible_system == "Darwin"

- name: Install VSCode for PopOS
  ansible.builtin.apt:
    name: code
  become: true
  when: ansible_pkg_mgr == "apt" and ansible_distribution == "Pop!_OS"

# Do not use Scoop for a global installation of VSCode. It ensures that there is
# only one settings file for all users.
- name: Install VSCode for Windows
  chocolatey.chocolatey.win_chocolatey:
    choco_args:
      - --params
      - "/NoDesktopIcon"
    name: vscode
  when: ansible_system == "Win32NT"

- name: Create VSCode user directory for MacOS
  ansible.builtin.file:
    group: "{{ group_id }}"
    mode: "755"
    owner: "{{ user_id }}"
    path: "{{ user_home }}/Library/Application Support/Code/User"
    state: directory
  become: true
  when: ansible_system == "Darwin"

- name: Copy VSCode keybindings file for MacOS
  ansible.builtin.template:
    dest: >-
      {{ user_home }}/Library/Application Support/Code/User/keybindings.json
    force: true
    group: "{{ group_id }}"
    mode: "644"
    owner: "{{ user_id }}"
    src: keybindings.json.j2
  become: true
  when: ansible_system == "Darwin"

- name: Copy VSCode settings file for MacOS
  ansible.builtin.template:
    dest: >-
      {{ user_home }}/Library/Application Support/Code/User/settings.json
    force: true
    group: "{{ group_id }}"
    mode: "644"
    owner: "{{ user_id }}"
    src: settings.json.j2
  become: true
  when: ansible_system == "Darwin"

- name: Create VSCode user directory for Linux
  ansible.builtin.file:
    group: "{{ group_id }}"
    mode: "755"
    owner: "{{ user_id }}"
    path: "{{ user_home }}/.config/Code/User"
    state: directory
  become: true
  when: ansible_system == "Linux" and ansible_pkg_mgr != "apk"

- name: Copy VSCode keybindings file for Linux
  ansible.builtin.template:
    dest: "{{ user_home }}/.config/Code/User/keybindings.json"
    force: true
    group: "{{ group_id }}"
    mode: "644"
    owner: "{{ user_id }}"
    src: keybindings.json.j2
  become: true
  when: ansible_system == "Linux" and ansible_pkg_mgr != "apk"

- name: Copy VSCode settings file for Linux
  ansible.builtin.template:
    dest: "{{ user_home }}/.config/Code/User/settings.json"
    force: true
    group: "{{ group_id }}"
    mode: "644"
    owner: "{{ user_id }}"
    src: settings.json.j2
  become: true
  when: ansible_system == "Linux" and ansible_pkg_mgr != "apk"

- name: Create VSCode user directory for Windows
  ansible.windows.win_file:
    owner: "{{ user_id }}"
    path: "{{ user_home }}/AppData/Roaming/Code/User"
    state: directory
  when: ansible_system == "Win32NT"

- name: Copy VSCode keybindings file for Windows
  ansible.windows.win_template:
    dest: "{{ user_home }}/AppData/Roaming/Code/User/keybindings.json"
    force: true
    src: keybindings.json.j2
  when: ansible_system == "Win32NT"

- name: Copy VSCode settings file for Windows
  ansible.windows.win_template:
    dest: "{{ user_home }}/AppData/Roaming/Code/User/settings.json"
    force: true
    owner: "{{ user_id }}"
    src: settings.json.j2
  when: ansible_system == "Win32NT"

- name: Apply customizations to VSCode
  ansible.builtin.import_tasks: customize.yaml
  when: >-
    vscode_install_customizations and ansible_system in ["Darwin", "Linux",
    "Win32NT"] and ansible_pkg_mgr != "apk"

- name: Install VSCode extensions for Unix
  ansible.builtin.command: code --install-extension {{ item }}
  become: true
  become_user: "{{ user_id }}"
  changed_when: "'successfully installed' in vscode_extension_install"
  environment:
    PATH: >-
      /opt/homebrew/bin:/usr/local/bin:/usr/share/code/bin:{{ ansible_env.PATH
      }}
  loop: "{{ vscode_extensions }}"
  register: vscode_extension_install
  when: ansible_system in ["Darwin", "Linux"] and ansible_pkg_mgr != "apk"

- name: Install VSCode extensions for Windows
  ansible.windows.win_shell: code --install-extension {{ item }}
  changed_when: "'successfully installed' in vscode_extension_install"
  environment:
    Path: "C:\\Program Files\\Microsoft VS Code\\bin;{{ ansible_env.Path }}"
  loop: "{{ vscode_extensions }}"
  register: vscode_extension_install
  when: ansible_system == "Win32NT"
