---
- name: Create Homebrew user for MacOS
  ansible.builtin.user:
    name: "{{ brew_user }}"
    create_home: true
  become: true
  when: ansible_system == "Darwin"

- name: Install Homebrew for MacOS
  ansible.builtin.shell:
    cmd: |
      if [ ! -x "$(command -v brew)" ]; then
        curl -LSfs 'https://raw.githubusercontent.com/Homebrew/install/master/install.sh' | bash
      fi
  become: true
  become_user: "{{ brew_user }}"
  changed_when: true
  failed_when: essential_homebrew.rc != 0
  register: essential_homebrew
  when: ansible_system == "Darwin"

- name: Install Chocolatey for Windows
  chocolatey.chocolatey.win_chocolatey:
    name: chocolatey
  when: ansible_system == "Win32NT"

- name: Install Scoop for Windows
  ansible.windows.win_shell: |
    $ErrorActionPreference = 'Stop'
    $PSNativeCommandUseErrorActionPreference = $True
    If (-Not (Get-Command -ErrorAction SilentlyContinue scoop)) {
      $ProgressPreference = 'SilentlyContinue'
      If (
        (New-Object Security.Principal.WindowsPrincipal( `
        [Security.Principal.WindowsIdentity]::GetCurrent() `
        )).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
      ) {
        $ScoopInstaller = [System.IO.Path]::GetTempFileName() -Replace '.tmp', '.ps1'
        Invoke-WebRequest -UseBasicParsing -OutFile $ScoopInstaller -Uri 'get.scoop.sh'
        & $ScoopInstaller -RunAsAdmin
        Remove-Item -Force -Path $ScoopInstaller
      }
      Else {
        Invoke-WebRequest -UseBasicParsing -Uri 'https://get.scoop.sh' `
          | Invoke-Expression
      }
    }
  changed_when: true
  failed_when: essential_scoop.rc != 0
  register: essential_scoop
  when: ansible_system == "Win32NT"

- name: Add Scoop global shims to path for Windows
  ansible.windows.win_path:
    elements: "C:\\ProgramData\\scoop\\shims"
    scope: machine
  when: ansible_system == "Win32NT"

- name: Add Scoop user shims to path for Windows
  ansible.windows.win_path:
    elements: "{{ user_home }}\\scoop\\shims"
    scope: user
  when: ansible_system == "Win32NT"

# Replaced temporarily by task below since win_scoop_bucket does not properly
# capture output and "scoop bucket add" now fails if the bucket is already
# added.
# - name: Add essential Scoop buckets for Windows
#   community.windows.win_scoop_bucket:
#     name: "{{ item }}"
# environment:
#   Path: "{{ scoop_shims }};{{ ansible_env.Path }}"
#   loop:
#     - extras
#     - main
#     - versions
#   when: ansible_system == "Win32NT"

- name: Install Scoop bucket dependency for Windows
  community.windows.win_scoop:
    global: "{{ scoop_global }}"
    name: mingit
  when: ansible_system == "Win32NT"

- name: Add essential Scoop buckets for Windows
  ansible.windows.win_shell: scoop bucket add {{ item }}
  changed_when: "'bucket was added successfully' in essential_scoop_bucket"
  environment:
    Path: >-
      {{ user_home }}\\scoop\\shims;C:\\ProgramData\\scoop\\shims;{{
      ansible_env.Path }}
  failed_when: >-
    essential_scoop_bucket.rc != 0 and 'bucket already exists' not in
    essential_scoop_bucket.stdout
  loop:
    - extras
    - main
    - versions
  register: essential_scoop_bucket
  when: ansible_system == "Win32NT"

- name: Update package list for OpenWrt
  ansible.builtin.command: opkg update
  become: true
  changed_when: false
  when: ansible_pkg_mgr == "opkg"

- name: Install essential packages for FreeBSD
  become: true
  community.general.pkgng:
    name:
      - 7-zip
      - bzip2
      - gnupg
      - gtar
      - gzip
      - unzip
      - zip
  when: ansible_system == "FreeBSD"

- name: Remove bloatware packages for Linux
  ansible.builtin.package:
    name: "{{ item }}"
    state: absent
  become: true
  loop: "{{ bloatware_linux_packages }}"
  when: ansible_system == "Linux"

- name: Install essential packages for Linux
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  become: true
  loop: "{{ essential_linux_packages }}"
  when: ansible_system == "Linux"

- name: Install essential packages for MacOS
  become: true
  become_user: "{{ brew_user }}"
  community.general.homebrew:
    name:
      - 7zip
      - bzip2
      - gnu-tar
      - gnupg
      - unzip
      - xz
      - zip
  when: ansible_system == "Darwin"

- name: Install essential packages for Windows
  community.windows.win_scoop:
    global: "{{ scoop_global }}"
    name:
      - 7zip
      - bzip2
      - file
      - gsudo
      - scoop-completion
      - unzip
      - vcredist
      - xz
      - zip
  when: ansible_system == "Win32NT"

- name: Create system binaries directory for Unix
  ansible.builtin.file:
    dest: /usr/local/bin
    mode: "755"
    state: directory
  become: true
  when: ansible_system != "Win32NT"
