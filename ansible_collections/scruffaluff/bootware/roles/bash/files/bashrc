# Bash settings file for non-login shells.
# shellcheck disable=SC1090,SC1091 shell=bash
#
# For more information, visit
# https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html.

# Private convenience functions.

# Path preview for Fzf file finder.
#
# Flags:
#   -d: Check if path is a directory.
_fzf_path_preview() {
  if [[ -d "${1}" ]]; then
    lsd --tree --depth 1 "${1}"
  else
    bat --color always --line-range :100 --style numbers "${1}"
  fi
}

# Public convenience functions.

# Override system implementation of command not found.
#
# Some system implementations will perform a long lookup to see if a package
# provides the command.
command_not_found_handle() {
  echo "Error: command '${1}' not found" >&2
}
export -f command_not_found_handle

# Open Bash history file with default editor.
edit-history() {
  local program="${EDITOR:-vi}"
  "${program}" "${HOME}/.bash_history"
}
export -f edit-history

# Complete commandline argument with interactive path search.
fzf-path-widget() {
  local line="${READLINE_LINE}" point
  fzf-file-widget
  if [[ "${line}" != "${READLINE_LINE}" ]]; then
    point="${READLINE_POINT}"
    READLINE_LINE="${READLINE_LINE:0:point-1}${READLINE_LINE:point}"
    READLINE_POINT="$((point - 1))"
  fi
}

# Prepend existing directories that are not in the system path.
#
# Flags:
#   -d: Check if path is a directory.
prepend-paths() {
  local inode
  for inode in "$@"; do
    # Variable in regex is quoted to perform an exact substring match.
    # shellcheck disable=SC2076
    if [[ -d "${inode}" && ! "${PATH}" =~ ":${inode}:" ]]; then
      export PATH="${inode}:${PATH}"
    fi
  done
}
export -f prepend-paths

# Source shell files if they exist.
#
# Flags:
#   -f: Check if file exists and is a regular file.
source-files() {
  local inode
  for inode in "$@"; do
    if [[ -f "${inode}" ]]; then
      source "${inode}"
    fi
  done
}
export -f source-files

# Check if current shell is within a remote SSH session.
#
# Since function returns an exit code, zero is true and nonzero is false.
#
# Flags:
#   -n: Check if string is nonempty.
ssh-session() {
  if [[ -n "${SSH_CLIENT}${SSH_CONNECTION}${SSH_TTY}" ]]; then
    return 0
  else
    return 1
  fi
}
export -f ssh-session

# Private convenience variables.
#
# Do not use long form flags for uname. They are not supported on MacOS.
#
# Flags:
#   -s: Show operating system kernel name.
os="$(uname -s)"
tty="$([[ "$-" =~ 'i' ]] && echo 'true' || echo '')"

# System settings.

# Add directories to system path that are not always included.
#
# Homebrew ARM directories should appear in system path before AMD directories
# since some ARM systems might have slower emulated AMD copies of programs.
prepend-paths '/usr/sbin' '/usr/local/bin' '/opt/homebrew/sbin' \
  '/opt/homebrew/bin' "${HOME}/.local/bin"

# Alacritty settings.

# Flags:
#   -n: Check if string is nonempty.
#   -v: Only show file path of command.
#   -x: Check if file exists and execute permission is granted.
#   -z: Check if the string is empty.
if [[ -n "${tty}" && "${TERM}" == 'alacritty' && -z "${TERM_PROGRAM}" ]]; then
  # Autostart Zellij or connect to existing session if within Alacritty
  # terminal and within an interactive shell for the login user. For more
  # information, visit https://zellij.dev/documentation/integration.html.
  #
  # Do not use logname command, since it sometimes incorrectly returns "root"
  # on MacOS. For for information, visit
  # https://github.com/vercel/hyper/issues/3762.
  if [[ -x "$(command -v zellij)" && -z "${ZELLIJ}" ]] && ! ssh-session &&
    [[ "${LOGNAME}" == "${USER}" ]]; then
    # Attach to a default session if it exists.
    export ZELLIJ_AUTO_ATTACH='true'
    # Exit the shell when Zellij exits.
    export ZELLIJ_AUTO_EXIT='true'
    SHELL="${BASH}" eval "$(zellij setup --generate-auto-start bash)"
  fi

  # Switch TERM variable to avoid "alacritty: unknown terminal type" errors
  # during remote connections.
  #
  # For more information, visit
  # https://github.com/alacritty/alacritty/issues/3962.
  export TERM='xterm-256color'
fi

# Bat settings.

# Set default pager to Bat.
#
# Flags:
#   -v: Only show file path of command.
#   -x: Check if file exists and execute permission is granted.
if [[ -x "$(command -v bat)" ]]; then
  export PAGER='bat'
fi

# Clipboard settings.

# Add unified clipboard aliases.
#
# Command cbcopy is defined as a function instead of an alias to add logic for
# removing the final newline from text during clipboard copies.
#
# Flags:
#   -v: Only show file path of command.
#   -x: Check if file exists and execute permission is granted.
if [[ "${os}" == 'Darwin' ]]; then
  cbcopy() {
    echo -n "$(cat)" | pbcopy
  }
  alias cbpaste='pbpaste'
elif [[ -x "$(command -v wl-copy)" ]]; then
  cbcopy() {
    echo -n "$(cat)" | wl-copy
  }
  alias cbpaste='wl-paste'
fi

# Docker settings.

# Ensure newer Docker features are enabled.
export COMPOSE_DOCKER_CLI_BUILD='true' DOCKER_BUILDKIT='true' \
  DOCKER_CLI_HINTS='false'

# Fd settings.

# Always have Fd read available gitignore files.
alias fd='fd --no-require-git'

# FFmpeg settings.

# Disable verbose FFmpeg banners.
alias ffmpeg='ffmpeg -hide_banner'
alias ffplay='ffplay -hide_banner'
alias ffprobe='ffprobe -hide_banner'

# Fzf settings.

# Load Fzf settings if interactive and available.
#
# Flags:
#   -c: Run commands in Bash shell.
#   -f: Make name refer to a function.
#   -n: Check if string is nonempty.
#   -r: Remove keybinding.
#   -v: Only show file path of command.
#   -x: Check if file exists and execute permission is granted.
if [[ -n "${tty}" && -x "$(command -v fzf)" ]]; then
  # Disable Fzf Alt-C command.
  export FZF_ALT_C_COMMAND=''
  # Set Fzf styles with solarized light theme based on
  # https://github.com/tinted-theming/tinted-fzf/blob/main/fish/base16-solarized-light.fish.
  export FZF_DEFAULT_OPTS="--border --reverse --bind ctrl-d:backward-kill-word 
--color bg:#fdf6e3,bg+:#eee8d5,fg:#657b83,fg+:#073642,header:#268bd2 
--color hl:#268bd2,hl+:#268bd2,info:#b58900,marker:#2aa198 
--color pointer:#2aa198,prompt:#b58900,spinner:#2aa198 
--height ~80% --with-shell 'bash -c'"

  eval "$(fzf --bash)"
  if [[ -x "$(command -v bat)" && -x "$(command -v lsd)" ]]; then
    export -f _fzf_path_preview
    export FZF_CTRL_T_OPTS="--preview '_fzf_path_preview {}' 
--preview-window border-left"
  fi
  if [[ -x "$(command -v fd)" ]]; then
    export FZF_CTRL_T_COMMAND='fd --hidden --no-require-git'
  fi

  # Change Fzf file search keybinding to Ctrl+F.
  bind -r "\C-t"
  bind -r "\ec"
  bind -x '"\C-f": fzf-path-widget'
fi

# Helix settings.

# Set default editor to Helix if available.
#
# Flags:
#   -v: Only show file path of command.
#   -x: Check if file exists and execute permission is granted.
if [[ -x "$(command -v hx)" ]]; then
  export EDITOR='hx'
  export SUDO_EDITOR='hx'
fi

# Homebrew settings

# Avoid Homebrew hints after installing a package.
export HOMEBREW_NO_ENV_HINTS='true'

# Just settings.

# Add alias for account wide Just recipes.
# shellcheck disable=SC2139
alias jt="just --justfile ${HOME}/.justfile --working-directory ."

# Kubernetes settings.

# Add Kubectl plugins to system path.
prepend-paths "${HOME}/.krew/bin"

# Lsd settings.

# Set solarized light color theme for several Unix tools.
#
# Uses output of command "vivid generate solarized-light" from
# https://github.com/sharkdp/vivid.
#
# Flags:
#   -f: Check if file exists and is a regular file.
if [[ -f "${HOME}/.ls_colors" ]]; then
  # shellcheck disable=SC2155
  export LS_COLORS="$(cat "${HOME}/.ls_colors")"
fi

# Replace Ls with Lsd if available.
#
# Flags:
#   -v: Only show file path of command.
#   -x: Check if file exists and execute permission is granted.
if [[ -x "$(command -v lsd)" ]]; then
  alias ls='lsd'
fi

# Procs settings.

# Set light theme since Procs automatic theming fails on some systems.
alias procs='procs --theme light'

# Python settings.

# Add Python debugger alias.
alias pdb='python3 -m pdb'

# Make Poetry create virtual environments inside projects.
export POETRY_VIRTUALENVS_IN_PROJECT='true'
# Fix Poetry package install issue on headless systems.
export PYTHON_KEYRING_BACKEND='keyring.backends.fail.Keyring'

# Make numerical compute libraries findable for MacOS.
if [[ "${os}" == 'Darwin' ]]; then
  if [[ -d '/opt/homebrew' ]]; then
    export OPENBLAS='/opt/homebrew/opt/openblas'
  else
    export OPENBLAS='/usr/local/opt/openblas'
  fi
  prepend-paths "${OPENBLAS}"
fi

# Ripgrep settings.

# Set Ripgrep settings file location.
export RIPGREP_CONFIG_PATH="${HOME}/.ripgreprc"

# Rust settings.

# Add Rust debugger aliases.
alias rgd='rust-gdb --quiet'
alias rld='rust-lldb --source-quietly'

# Add Rust binaries to system path.
prepend-paths "${HOME}/.cargo/bin"

# Shell settings.

# Add alias for remove by force.
alias rmf='rm -fr'
# Make rsync use human friendly output.
alias rsync='rsync --partial --progress --filter ":- .gitignore"'
# Disable MacOS default shell is now Zsh message. Value must be 1.
export BASH_SILENCE_DEPRECATION_WARNING=1

# Configure completions if interactive.
#
# Custom Bash keybindings are loaded from ~/.inputrc with readline.
#
# Flags:
#   -d: Check if path is a directory.
#   -n: Check if string is nonempty.
if [[ -n "${tty}" ]]; then
  # Load Bash completion.
  if [[ "${os}" == 'Darwin' ]]; then
    if [[ -d '/opt/homebrew' ]]; then
      source-files "/opt/homebrew/etc/profile.d/bash_completion.sh"
    else
      source-files "/usr/local/etc/profile.d/bash_completion.sh"
    fi
  elif [[ "${os}" == 'FreeBSD' ]]; then
    source-files '/usr/local/share/bash-completion/bash_completion'
  else
    source-files '/usr/share/bash-completion/bash_completion'
  fi
fi

# Starship settings.

# Disable Starship warnings about command timeouts.
export STARSHIP_LOG='error'

# Initialize Starship if interactive and available.
#
# Flags:
#   -n: Check if string is nonempty.
#   -v: Only show file path of command.
#   -x: Check if file exists and execute permission is granted.
if [[ -n "${tty}" ]]; then
  if [[ -x "$(command -v starship)" ]]; then
    eval "$(starship init bash)"
  else
    PS1="\n\u at \h in \w\n❯ "
  fi
fi

# TypeScript settings.

# Add Deno binaries to system path.
prepend-paths "${HOME}/.deno/bin"

# Add NPM global binaries to system path.
prepend-paths "${HOME}/.npm/global/bin"

# Visual Studio Code settings.

# Add Visual Studio Code binaries to system path for Linux.
prepend-paths '/usr/share/code/bin'

# Wasmtime settings.

# Add Wasmtime binaries to system path.
export WASMTIME_HOME="${HOME}/.wasmtime"
prepend-paths "${WASMTIME_HOME}/bin"

# Yazi settings.

# Yazi wrapper to change directory on program exit.
#
# Flags:
#   -n: Check if string is nonempty.
yz() {
  local cwd='' tmp=''
  tmp="$(mktemp)"
  yazi --cwd-file "${tmp}" "$@"
  cwd="$(cat "${tmp}")"
  if [[ -n "${cwd}" && "${cwd}" != "${PWD}" ]]; then
    # shellcheck disable=SC2164
    cd "${cwd}"
  fi
  rm "${tmp}"
}

# Zoxide settings.

# Disable fickle Zoxide directory preview.
export _ZO_FZF_OPTS="${FZF_DEFAULT_OPTS}"

# Initialize Zoxide if interactive and available.
#
# Flags:
#   -n: Check if string is nonempty.
#   -v: Only show file path of command.
#   -x: Check if file exists and execute permission is granted.
if [[ -n "${tty}" && -x "$(command -v zoxide)" ]]; then
  eval "$(zoxide init --cmd cd bash)"
fi

# Remove private convenience variables.

unset os
unset tty

# User settings.

# Load user aliases, secrets, and variables.
source-files "${HOME}/.env" "${HOME}/.secrets" "${HOME}/.env.bash" \
  "${HOME}/.secrets.bash"
